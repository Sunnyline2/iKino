// <auto-generated />
using eKino.Core.Domain;
using eKino.Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace eKino.Infrastructure.Migrations
{
    [DbContext(typeof(CinemaContext))]
    [Migration("20170930140742_updat")]
    partial class updat
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.0-rtm-26452")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("eKino.Core.Domain.Actor", b =>
                {
                    b.Property<Guid>("ActorId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateOfBirth");

                    b.Property<DateTime>("DateOfDeath");

                    b.Property<string>("Name");

                    b.HasKey("ActorId");

                    b.ToTable("Actors");
                });

            modelBuilder.Entity("eKino.Core.Domain.Movie", b =>
                {
                    b.Property<Guid>("MovieId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<TimeSpan>("Duration");

                    b.Property<string>("Name");

                    b.HasKey("MovieId");

                    b.ToTable("Movies");
                });

            modelBuilder.Entity("eKino.Core.Domain.MovieActor", b =>
                {
                    b.Property<Guid>("ActorId");

                    b.Property<Guid>("MovieId");

                    b.HasKey("ActorId", "MovieId");

                    b.HasIndex("MovieId");

                    b.ToTable("MovieActor");
                });

            modelBuilder.Entity("eKino.Core.Domain.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Mail");

                    b.Property<string>("Password");

                    b.Property<string>("Role");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("Username");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("eKino.Core.Domain.Video", b =>
                {
                    b.Property<Guid>("VideoId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("MovieId");

                    b.Property<string>("Path");

                    b.Property<int>("VideoService");

                    b.HasKey("VideoId");

                    b.HasIndex("MovieId");

                    b.ToTable("Video");
                });

            modelBuilder.Entity("eKino.Core.Domain.Vote", b =>
                {
                    b.Property<Guid>("VoteId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<Guid?>("MovieId");

                    b.Property<decimal>("Rate");

                    b.Property<Guid>("UserId");

                    b.HasKey("VoteId");

                    b.HasIndex("MovieId");

                    b.HasIndex("UserId");

                    b.ToTable("Votes");
                });

            modelBuilder.Entity("eKino.Core.Domain.MovieActor", b =>
                {
                    b.HasOne("eKino.Core.Domain.Actor", "Actor")
                        .WithMany("Movies")
                        .HasForeignKey("ActorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("eKino.Core.Domain.Movie", "Movie")
                        .WithMany("Actors")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("eKino.Core.Domain.Video", b =>
                {
                    b.HasOne("eKino.Core.Domain.Movie")
                        .WithMany("Videos")
                        .HasForeignKey("MovieId");
                });

            modelBuilder.Entity("eKino.Core.Domain.Vote", b =>
                {
                    b.HasOne("eKino.Core.Domain.Movie")
                        .WithMany("Votes")
                        .HasForeignKey("MovieId");

                    b.HasOne("eKino.Core.Domain.User", "User")
                        .WithMany("Votes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
